{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prave\\\\Desktop\\\\very heavy\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        const savedToken = localStorage.getItem('authToken');\n        if (savedToken) {\n          setToken(savedToken);\n          await loadUserProfile(savedToken);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        localStorage.removeItem('authToken');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Load user profile with token\n  const loadUserProfile = async authToken => {\n    try {\n      const response = await fetch(`${API_URL}/api/profile`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCurrentUser(data.user);\n        setUserProfile(data.user.profile);\n        return true;\n      } else {\n        throw new Error('Failed to load profile');\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      localStorage.removeItem('authToken');\n      setToken(null);\n      setCurrentUser(null);\n      setUserProfile(null);\n      return false;\n    }\n  };\n\n  // Send OTP via email\n  const sendOTP = async email => {\n    try {\n      const response = await fetch(`${API_URL}/api/send-otp`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to send OTP');\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n      throw error;\n    }\n  };\n\n  // Verify OTP (for signup process)\n  const verifyOTP = async (email, otp) => {\n    try {\n      const response = await fetch(`${API_URL}/api/verify-otp`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          otp\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to verify OTP');\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      throw error;\n    }\n  };\n\n  // Signup with email and password\n  const signup = async (email, password) => {\n    try {\n      console.log('AuthContext: Attempting signup with email:', email);\n      const response = await fetch(`${API_URL}/api/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log('AuthContext: Signup response status:', response.status);\n      if (!response.ok) {\n        // If signup endpoint doesn't exist, create a local user account\n        if (response.status === 404) {\n          console.log('AuthContext: Signup endpoint not found, creating local account');\n          return await createLocalUserAccount(email, password);\n        }\n        const error = await response.json();\n        console.error('AuthContext: Signup error response:', error);\n        throw new Error(error.message || 'Failed to create account');\n      }\n      const result = await response.json();\n      console.log('AuthContext: Signup success result:', result);\n      if (result.success && result.token) {\n        // Save token and user data\n        localStorage.setItem('authToken', result.token);\n        setToken(result.token);\n        setCurrentUser(result.user);\n        setUserProfile(result.user.profile);\n        console.log('AuthContext: Account created successfully:', result.user.email);\n        return result;\n      } else {\n        throw new Error(result.message || 'Signup failed');\n      }\n    } catch (error) {\n      console.error('AuthContext: Error creating account:', error);\n      throw error;\n    }\n  };\n\n  // Create local user account (fallback)\n  const createLocalUserAccount = async (email, password) => {\n    try {\n      // Create a simple user object\n      const user = {\n        id: Date.now().toString(),\n        email: email,\n        profile: null,\n        // No profile yet\n        createdAt: new Date().toISOString()\n      };\n\n      // Create a simple token\n      const token = btoa(JSON.stringify({\n        userId: user.id,\n        email: user.email\n      }));\n\n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n      localStorage.setItem('userData', JSON.stringify(user));\n\n      // Update state\n      setToken(token);\n      setCurrentUser(user);\n      setUserProfile(null);\n      console.log('AuthContext: Local account created successfully:', user.email);\n      return {\n        success: true,\n        token: token,\n        user: user,\n        message: 'Account created successfully'\n      };\n    } catch (error) {\n      console.error('AuthContext: Error creating local account:', error);\n      throw new Error('Failed to create local account');\n    }\n  };\n\n  // Login with email and password\n  const login = async (email, password) => {\n    try {\n      console.log('AuthContext: Attempting login with email:', email);\n      const response = await fetch(`${API_URL}/api/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log('AuthContext: Login response status:', response.status);\n      if (!response.ok) {\n        // If login endpoint doesn't exist, try local login\n        if (response.status === 404) {\n          console.log('AuthContext: Login endpoint not found, trying local login');\n          return await localLogin(email, password);\n        }\n        const error = await response.json();\n        console.error('AuthContext: Login error response:', error);\n        throw new Error(error.message || 'Failed to login');\n      }\n      const result = await response.json();\n      console.log('AuthContext: Login success result:', result);\n      if (result.success && result.token) {\n        // Save token and user data\n        localStorage.setItem('authToken', result.token);\n        setToken(result.token);\n        setCurrentUser(result.user);\n        setUserProfile(result.user.profile);\n        console.log('AuthContext: User logged in successfully:', result.user.email);\n        return result;\n      } else {\n        throw new Error(result.message || 'Login failed');\n      }\n    } catch (error) {\n      console.error('AuthContext: Error logging in:', error);\n      throw error;\n    }\n  };\n\n  // Local login (fallback)\n  const localLogin = async (email, password) => {\n    try {\n      // Get stored user data\n      const storedUserData = localStorage.getItem('userData');\n      if (!storedUserData) {\n        throw new Error('No account found with this email');\n      }\n      const user = JSON.parse(storedUserData);\n\n      // Simple validation (in real app, you'd hash the password)\n      if (user.email !== email) {\n        throw new Error('Invalid email or password');\n      }\n\n      // Create token\n      const token = btoa(JSON.stringify({\n        userId: user.id,\n        email: user.email\n      }));\n\n      // Save to localStorage\n      localStorage.setItem('authToken', token);\n\n      // Update state\n      setToken(token);\n      setCurrentUser(user);\n      setUserProfile(user.profile);\n      console.log('AuthContext: Local login successful:', user.email);\n      return {\n        success: true,\n        token: token,\n        user: user,\n        message: 'Login successful'\n      };\n    } catch (error) {\n      console.error('AuthContext: Error in local login:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      if (token) {\n        // Optional: Call logout endpoint\n        await fetch(`${API_URL}/api/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      // Clear local state\n      localStorage.removeItem('authToken');\n      setToken(null);\n      setCurrentUser(null);\n      setUserProfile(null);\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async profileData => {\n    try {\n      if (!token) {\n        throw new Error('Not authenticated');\n      }\n      const response = await fetch(`${API_URL}/api/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          profile: profileData\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update profile');\n      }\n      const result = await response.json();\n      setCurrentUser(result.user);\n      setUserProfile(result.user.profile);\n      return result;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  };\n\n  // Check if user has profile\n  const hasProfile = () => {\n    return userProfile && Object.keys(userProfile).length > 0 && userProfile.name;\n  };\n  const value = {\n    currentUser,\n    userProfile,\n    token,\n    sendOTP,\n    verifyOTP,\n    signup,\n    login,\n    logout,\n    updateUserProfile,\n    hasProfile,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"IapBcKt5k07MYyNQLYej4RJSB8Q=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","API_URL","process","env","REACT_APP_API_URL","AuthProvider","children","_s2","currentUser","setCurrentUser","userProfile","setUserProfile","loading","setLoading","token","setToken","initAuth","savedToken","localStorage","getItem","loadUserProfile","error","console","removeItem","authToken","response","fetch","headers","ok","data","json","user","profile","sendOTP","email","method","body","JSON","stringify","message","result","verifyOTP","otp","signup","password","log","status","createLocalUserAccount","success","setItem","id","Date","now","toString","createdAt","toISOString","btoa","userId","login","localLogin","storedUserData","parse","logout","updateUserProfile","profileData","hasProfile","Object","keys","length","name","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/prave/Desktop/very heavy/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n\r\n  // Initialize auth state from localStorage\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      try {\r\n        const savedToken = localStorage.getItem('authToken');\r\n        if (savedToken) {\r\n          setToken(savedToken);\r\n          await loadUserProfile(savedToken);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        localStorage.removeItem('authToken');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  // Load user profile with token\r\n  const loadUserProfile = async (authToken) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/profile`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setCurrentUser(data.user);\r\n        setUserProfile(data.user.profile);\r\n        return true;\r\n      } else {\r\n        throw new Error('Failed to load profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading profile:', error);\r\n      localStorage.removeItem('authToken');\r\n      setToken(null);\r\n      setCurrentUser(null);\r\n      setUserProfile(null);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Send OTP via email\r\n  const sendOTP = async (email) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/send-otp`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Failed to send OTP');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Verify OTP (for signup process)\r\n  const verifyOTP = async (email, otp) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/verify-otp`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, otp }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Failed to verify OTP');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error verifying OTP:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Signup with email and password\r\n  const signup = async (email, password) => {\r\n    try {\r\n      console.log('AuthContext: Attempting signup with email:', email);\r\n      \r\n      const response = await fetch(`${API_URL}/api/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      console.log('AuthContext: Signup response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        // If signup endpoint doesn't exist, create a local user account\r\n        if (response.status === 404) {\r\n          console.log('AuthContext: Signup endpoint not found, creating local account');\r\n          return await createLocalUserAccount(email, password);\r\n        }\r\n        \r\n        const error = await response.json();\r\n        console.error('AuthContext: Signup error response:', error);\r\n        throw new Error(error.message || 'Failed to create account');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('AuthContext: Signup success result:', result);\r\n      \r\n      if (result.success && result.token) {\r\n        // Save token and user data\r\n        localStorage.setItem('authToken', result.token);\r\n        setToken(result.token);\r\n        setCurrentUser(result.user);\r\n        setUserProfile(result.user.profile);\r\n        \r\n        console.log('AuthContext: Account created successfully:', result.user.email);\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || 'Signup failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('AuthContext: Error creating account:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Create local user account (fallback)\r\n  const createLocalUserAccount = async (email, password) => {\r\n    try {\r\n      // Create a simple user object\r\n      const user = {\r\n        id: Date.now().toString(),\r\n        email: email,\r\n        profile: null, // No profile yet\r\n        createdAt: new Date().toISOString()\r\n      };\r\n\r\n      // Create a simple token\r\n      const token = btoa(JSON.stringify({ userId: user.id, email: user.email }));\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('authToken', token);\r\n      localStorage.setItem('userData', JSON.stringify(user));\r\n\r\n      // Update state\r\n      setToken(token);\r\n      setCurrentUser(user);\r\n      setUserProfile(null);\r\n\r\n      console.log('AuthContext: Local account created successfully:', user.email);\r\n      \r\n      return {\r\n        success: true,\r\n        token: token,\r\n        user: user,\r\n        message: 'Account created successfully'\r\n      };\r\n    } catch (error) {\r\n      console.error('AuthContext: Error creating local account:', error);\r\n      throw new Error('Failed to create local account');\r\n    }\r\n  };\r\n\r\n  // Login with email and password\r\n  const login = async (email, password) => {\r\n    try {\r\n      console.log('AuthContext: Attempting login with email:', email);\r\n      \r\n      const response = await fetch(`${API_URL}/api/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      console.log('AuthContext: Login response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        // If login endpoint doesn't exist, try local login\r\n        if (response.status === 404) {\r\n          console.log('AuthContext: Login endpoint not found, trying local login');\r\n          return await localLogin(email, password);\r\n        }\r\n        \r\n        const error = await response.json();\r\n        console.error('AuthContext: Login error response:', error);\r\n        throw new Error(error.message || 'Failed to login');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('AuthContext: Login success result:', result);\r\n      \r\n      if (result.success && result.token) {\r\n        // Save token and user data\r\n        localStorage.setItem('authToken', result.token);\r\n        setToken(result.token);\r\n        setCurrentUser(result.user);\r\n        setUserProfile(result.user.profile);\r\n        \r\n        console.log('AuthContext: User logged in successfully:', result.user.email);\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('AuthContext: Error logging in:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Local login (fallback)\r\n  const localLogin = async (email, password) => {\r\n    try {\r\n      // Get stored user data\r\n      const storedUserData = localStorage.getItem('userData');\r\n      if (!storedUserData) {\r\n        throw new Error('No account found with this email');\r\n      }\r\n\r\n      const user = JSON.parse(storedUserData);\r\n      \r\n      // Simple validation (in real app, you'd hash the password)\r\n      if (user.email !== email) {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n\r\n      // Create token\r\n      const token = btoa(JSON.stringify({ userId: user.id, email: user.email }));\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('authToken', token);\r\n\r\n      // Update state\r\n      setToken(token);\r\n      setCurrentUser(user);\r\n      setUserProfile(user.profile);\r\n\r\n      console.log('AuthContext: Local login successful:', user.email);\r\n      \r\n      return {\r\n        success: true,\r\n        token: token,\r\n        user: user,\r\n        message: 'Login successful'\r\n      };\r\n    } catch (error) {\r\n      console.error('AuthContext: Error in local login:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      if (token) {\r\n        // Optional: Call logout endpoint\r\n        await fetch(`${API_URL}/api/logout`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n    } finally {\r\n      // Clear local state\r\n      localStorage.removeItem('authToken');\r\n      setToken(null);\r\n      setCurrentUser(null);\r\n      setUserProfile(null);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateUserProfile = async (profileData) => {\r\n    try {\r\n      if (!token) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n\r\n      const response = await fetch(`${API_URL}/api/profile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ profile: profileData })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Failed to update profile');\r\n      }\r\n\r\n      const result = await response.json();\r\n      setCurrentUser(result.user);\r\n      setUserProfile(result.user.profile);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Check if user has profile\r\n  const hasProfile = () => {\r\n    return userProfile && Object.keys(userProfile).length > 0 && userProfile.name;\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    userProfile,\r\n    token,\r\n    sendOTP,\r\n    verifyOTP,\r\n    signup,\r\n    login,\r\n    logout,\r\n    updateUserProfile,\r\n    hasProfile,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}